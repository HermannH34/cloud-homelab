#!/bin/bash

set -e

echo "üöÄ K3s Homelab avec Flux - Script de d√©ploiement automatis√©"
echo "============================================================"
echo ""

# V√©rifications pr√©alables
echo "üîç V√©rification des pr√©requis..."

# V√©rifier Terraform
if ! command -v terraform &> /dev/null; then
    echo "‚ùå Terraform n'est pas install√©. Installez-le depuis https://terraform.io"
    exit 1
fi

# V√©rifier AWS CLI
if ! command -v aws &> /dev/null; then
    echo "‚ùå AWS CLI n'est pas install√©. Installez-le depuis https://aws.amazon.com/cli/"
    exit 1
fi

# V√©rifier la configuration AWS
if ! aws sts get-caller-identity &> /dev/null; then
    echo "‚ùå AWS CLI n'est pas configur√©. Ex√©cutez 'aws configure'"
    exit 1
fi

echo "‚úÖ Pr√©requis valid√©s"
echo ""

# GitHub token check
if [ -z "$GITHUB_TOKEN" ]; then
    echo "‚ö†Ô∏è  GITHUB_TOKEN n'est pas d√©fini."
    echo "   Pour le bootstrap Flux automatique, d√©finissez votre token :"
    echo "   export GITHUB_TOKEN=your_github_token_here"
    echo ""
    read -p "Continuer sans token GitHub ? (y/N): " -n 1 -r
    echo
    if [[ ! $REPLY =~ ^[Yy]$ ]]; then
        echo "D√©ploiement annul√©. D√©finissez GITHUB_TOKEN et relancez."
        exit 1
    fi
    BOOTSTRAP_FLUX=false
else
    echo "‚úÖ GITHUB_TOKEN d√©tect√©"
    BOOTSTRAP_FLUX=true
fi

echo ""
echo "üìã Configuration du d√©ploiement :"
echo "   - R√©gion AWS: eu-west-3"
echo "   - Instance: t3.small"
echo "   - K3s avec Flux"
echo "   - Bootstrap Flux: $BOOTSTRAP_FLUX"
echo ""

read -p "D√©marrer le d√©ploiement ? (y/N): " -n 1 -r
echo
if [[ ! $REPLY =~ ^[Yy]$ ]]; then
    echo "D√©ploiement annul√©."
    exit 0
fi

echo ""
echo "üîß Initialisation de Terraform..."
terraform init

echo ""
echo "üìã Planification du d√©ploiement..."
terraform plan

echo ""
echo "üöÄ D√©ploiement en cours..."
terraform apply -auto-approve

echo ""
echo "üìä R√©cup√©ration des informations du cluster..."
INSTANCE_IP=$(terraform output -raw instance_ip)
SSH_COMMAND=$(terraform output -raw ssh_command)

echo ""
echo "‚úÖ D√©ploiement termin√© !"
echo ""
echo "üìã Informations du cluster :"
echo "   IP publique: $INSTANCE_IP"
echo "   Commande SSH: $SSH_COMMAND"
echo ""

echo "‚è≥ Attente que le cluster soit pr√™t (peut prendre 2-3 minutes)..."
sleep 120

echo ""
echo "üîç V√©rification du statut du cluster..."
terraform output cluster_info_command
eval $(terraform output -raw cluster_info_command)

echo ""
if [ "$BOOTSTRAP_FLUX" = true ]; then
    echo "üîÑ Bootstrap de Flux en cours..."
    ssh -o StrictHostKeyChecking=no -i k3s-key.pem ubuntu@$INSTANCE_IP "
        export GITHUB_TOKEN=$GITHUB_TOKEN
        ./bootstrap-flux.sh
    "
    
    echo ""
    echo "‚è≥ Surveillance du d√©ploiement Flux (60 secondes)..."
    ssh -o StrictHostKeyChecking=no -i k3s-key.pem ubuntu@$INSTANCE_IP "
        timeout 60 watch -n 5 kubectl get pods -A
    " || true
else
    echo "‚ö†Ô∏è  Bootstrap Flux manuel requis :"
    echo "   1. SSH: $SSH_COMMAND"
    echo "   2. D√©finir le token: export GITHUB_TOKEN=your_token"
    echo "   3. Ex√©cuter: ./bootstrap-flux.sh"
fi

echo ""
echo "üéâ Homelab K3s avec Flux d√©ploy√© avec succ√®s !"
echo ""
echo "üîó Commandes utiles :"
echo "   - SSH vers le cluster: $SSH_COMMAND"
echo "   - Infos cluster: $(terraform output -raw cluster_info_command)"
echo "   - Bootstrap Flux: $(terraform output -raw flux_bootstrap_command)"
echo "   - Surveillance pods: $SSH_COMMAND './watch-pods.sh'"
echo ""
echo "üîë Cl√© Age publique pour SOPS:"
terraform output age_public_key_command
eval $(terraform output -raw age_public_key_command)
echo ""
echo "üí° Prochaines √©tapes :"
echo "   1. Cr√©er le repository GitHub 'kubernetes-homelab'"
echo "   2. Ajouter la cl√© Age publique √† votre configuration SOPS"
echo "   3. Committer vos manifests Kubernetes dans le repo"
echo "   4. Flux va automatiquement d√©ployer vos applications"
echo ""
echo "üßπ Pour supprimer l'infrastructure: terraform destroy" 